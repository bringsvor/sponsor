-
  Gjedna
-
  !record {model: sponsored_child, id: child1}:
    name: 'Samba'
    gender: 'male'
-
  !record {model: sponsored_child, id: child2}:
    name: 'Bamba'
    gender: 'female'
-
  The child needs a sponsor initially
-
  !assert {model: sponsored_child, id: child1, string: 'Child has no sponsor assigned'}:
    - needs_sponsor == True
-
  !record {model: sponsor, id: sponsor1}:
    name: 'Donald Duck'
    sponsored_children:
      - start_date: '2014-01-01'
        end_date: '2014-08-08'
        sponsored_child: child1
      - start_date: '2014-01-02'
        sponsored_child: child2
-
  http://www.zbeanztech.com/blog/how-effective-yaml-testing-openerp
-
  !assert {model: sponsored_child, id: child1}:
    - needs_sponsor == False
-
  Check we are assigned
-
  !assert {model: sponsored_child, id: child1, string: 'Unable to retrieve sponsor name'}:
    #sponsor_name = self.read(cr, uid, [ref('child1')], ['sponsor_name'])
    - sponsor_name == 'Donald Duck'
-
  Check the sponsor history
-
  !record {model: sponsor, id: sponsor2}:
    name: 'Dollie Duck'
    sponsored_children:
      - start_date: '2014-02-02'
        sponsored_child: child2
-
      Now the child should have two sponsors
-
  !assert {model: sponsored_child, id: child2, string = 'Child must have two sponsors'}:
  - len(sponsors) == 2
-
  Test the order
-
  !python {model: sponsored_child, string = 'Sponsors must appear in order'}: |
    child = self.browse(cr, uid, [ref('child2')])
    sponsor_names = [ x.sponsor_id.name for x in child.sponsors ]
    print "NAMES", sponsor_names
    assert sponsor_names == ['Dollie Duck','Donald Duck']
-
  And from the child side
-
